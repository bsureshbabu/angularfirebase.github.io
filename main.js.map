{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/customer-list/customer-list.component.css","webpack:///./src/app/customer-list/customer-list.component.html","webpack:///./src/app/customer-list/customer-list.component.ts","webpack:///./src/app/customer/customer.component.css","webpack:///./src/app/customer/customer.component.html","webpack:///./src/app/customer/customer.component.ts","webpack:///./src/app/shared/customer.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <app-customer></app-customer>\\n</div>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule, FormsModule } from \"@angular/forms\";\nimport { AngularFireModule } from 'angularfire2';\nimport { AngularFireDatabaseModule } from 'angularfire2/database';\n\nimport { AppComponent } from './app.component';\nimport { CustomerComponent } from './customer/customer.component';\nimport { CustomerListComponent } from './customer-list/customer-list.component';\nimport { CustomerService } from './shared/customer.service';\nimport { environment } from '../environments/environment';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CustomerComponent,\n    CustomerListComponent\n  ],\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule,\n    AngularFireModule.initializeApp(environment.firebaseConfig),\n    AngularFireDatabaseModule,\n    FormsModule\n  ],\n  providers: [CustomerService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<form class=\\\"form-inline\\\">\\n \\n</form>\\n<table class=\\\"table table-sm\\\">\\n  <thead>\\n    <th>Full Name</th>\\n  \\n  </thead>\\n  <ng-container *ngFor=\\\"let customer of customerArray\\\">\\n    <tr class=\\\"\\\" >\\n      <td>{{customer.fullName}}</td>\\n     \\n      \\n    </tr>\\n  </ng-container>\\n</table>\\n\"","import { Component, OnInit } from '@angular/core';\n\nimport { CustomerService } from '../shared/customer.service';\n\n@Component({\n  selector: 'app-customer-list',\n  templateUrl: './customer-list.component.html',\n  styleUrls: ['./customer-list.component.css']\n})\nexport class CustomerListComponent implements OnInit {\n\n  constructor(private customerService: CustomerService) { }\n  customerArray = [];\n  // showDeletedMessage: boolean;\n  // searchText: string = \"\";\n\n  ngOnInit() {\n    this.customerService.getCustomers().subscribe(\n      list => {\n        this.customerArray = list.map(item => {\n          return {\n            $key: item.key,\n            ...item.payload.val()\n          };\n        });\n      });\n  }\n\n  // onDelete($key) {\n  //   if (confirm('Are you sure to delete this record ?')) {\n  //     this.customerService.deleteCustomer($key);\n  //     this.showDeletedMessage = true;\n  //     setTimeout(() => this.showDeletedMessage = false, 3000);\n  //   }\n  // }\n\n\n  // filterCondition(customer) {\n  //   return customer.fullName.toLowerCase().indexOf(this.searchText.toLowerCase()) != -1;\n  // }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-md-5\\\">\\n    <form [formGroup]=\\\"this.customerService.form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n      <input type=\\\"hidden\\\" formControlName=\\\"$key\\\">\\n      <div class=\\\"form-group\\\">\\n        <label>Full Name</label>\\n        <input formControlName=\\\"fullName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{'is-invalid':submitted && formControls.fullName.errors}\\\">\\n        <div class=\\\"invalid-feedback\\\" *ngIf=\\\"submitted && formControls.fullName.errors\\\">\\n          This field is required.</div>\\n      </div>\\n    \\n      <div class=\\\"form-group\\\">\\n        <input type=\\\"submit\\\" class=\\\"btn btn-primary\\\" value=\\\"Submit\\\">\\n      </div>\\n    </form>\\n    <div class=\\\"alert alert-info\\\"  *ngIf=\\\"showSuccessMessage\\\">\\n      Submitted successfully.\\n    </div>\\n  </div>\\n  <div class=\\\"col-md-7\\\">\\n    <app-customer-list></app-customer-list>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\n\nimport { CustomerService } from '../shared/customer.service';\n\n@Component({\n  selector: 'app-customer',\n  templateUrl: './customer.component.html',\n  styleUrls: ['./customer.component.css']\n})\nexport class CustomerComponent implements OnInit {\n\n  constructor(private customerService: CustomerService) { }\n  submitted: boolean;\n  showSuccessMessage: boolean;\n  formControls = this.customerService.form.controls;\n\n  ngOnInit() {\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.customerService.form.valid) {\n      if (this.customerService.form.get('$key').value == null)\n        this.customerService.insertCustomer(this.customerService.form.value);\n      else\n        // this.customerService.updateCustomer(this.customerService.form.value);\n      this.showSuccessMessage = true;\n      setTimeout(() => this.showSuccessMessage = false, 3000);\n      this.submitted = false;\n      this.customerService.form.reset();\n      //this is to be done for proper reset operation\n      this.customerService.form.setValue({\n        $key: null,\n        fullName: ''\n     \n      });\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { AngularFireDatabase, AngularFireList } from 'angularfire2/database';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerService {\n\n  constructor(private firebase: AngularFireDatabase) { }\n  customerList: AngularFireList<any>;\n\n  form = new FormGroup({\n    $key: new FormControl(null),\n    fullName: new FormControl('', Validators.required),\n   \n  });\n\n\n  getCustomers() {\n    this.customerList = this.firebase.list('customers');\n    return this.customerList.snapshotChanges();\n  }\n\n\n  insertCustomer(customer) {\n    this.customerList.push({\n      fullName: customer.fullName\n    \n    });\n  }\n\n  populateForm(customer) {\n    this.form.setValue(customer);\n  }\n\n  // updateCustomer(customer) {\n  //   this.customerList.update(customer.$key,\n  //     {\n  //       fullName: customer.fullName,\n      \n  //     });\n  // }\n\n  // deleteCustomer($key: string) {\n  //   this.customerList.remove($key);\n  // }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  firebaseConfig : {\n    apiKey: \"AIzaSyB6griItQJaR2BlWkLUxYqUiV2XKNfGBjg\",\n    authDomain: \"mysample-c63e7.firebaseapp.com\",\n    databaseURL: \"https://mysample-c63e7.firebaseio.com\",\n    projectId: \"mysample-c63e7\",\n    storageBucket: \"mysample-c63e7.appspot.com\",\n    messagingSenderId: \"107655375199\"\n  }\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}